version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - ./database:/var/lib/postgresql/data
    networks:
      - df-network

  backend:
    image: node:18
    container_name: backend
    depends_on:
      - postgres
    working_dir: /app
    volumes:
      - ./backend:/app
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      BACKEND_URL: ${BACKEND_URL}
    command: >
      sh -c "
      if [ ! -d /app/.git ]; then
        git clone --branch develop https://github.com/syk-yaman/shift-digital-frontiers.git /app;
      else
        cd /app && git fetch && git checkout develop && git pull;
      fi &&
      cd /app/src/backend &&
      npm install &&
      npm run typeorm -- migration:run -d ./data-source.ts &&
      npm run start:dev"
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - df-network

  frontend:
    image: node:18
    container_name: frontend
    depends_on:
      - backend
    working_dir: /app
    volumes:
      - ./frontend:/app
    environment:
      API_URL: ${API_URL}
    command: >
      sh -c "
      if [ ! -d /app/.git ]; then
        git clone --branch develop https://github.com/syk-yaman/shift-digital-frontiers.git /app;
      else
        cd /app && git fetch && git checkout develop && git pull;
      fi &&
      cd /app/src/frontend &&
      npm install &&
      npm run build &&
      npx serve -s dist -l tcp:0.0.0.0:${FRONTEND_PORT}"
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    networks:
      - df-network

  nginx:
    image: nginx:1.27.4
    container_name: nginx_proxy
    depends_on:
      - frontend
      - backend
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx.conf.template:/etc/nginx/nginx.conf.template:ro
      - ./docker-entrypoint.sh:/docker-entrypoint.sh:ro
    environment:
      FRONTEND_PORT: ${FRONTEND_PORT}
      BACKEND_PORT: ${BACKEND_PORT}
    entrypoint: ["/bin/sh", "/docker-entrypoint.sh"]
    networks:
      - df-network

networks:
  df-network:
    driver: bridge